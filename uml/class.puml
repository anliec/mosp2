@startuml

class World{
    - shared_ptr<MapManager>[][] maps
    - int height
    - int width

    - World()
    + shared_ptr<World> makeWorld()
    + shared_ptr<mapManager> getMap(const int& x, const int& y)
}

class MapManager{
    - list<shared_ptr<MapObject>> objects
    - map<int, shared_ptr<Living>> players
    - MapTiles tiles
    - vector<startPos> fightStartPoses
    - list<FightManager> onGoingFight

    + bool isLineOfViewFree(const Point& a, const Point& b)
    + vector<Point> shortestPath(const Living& living, const Point& dest)
    + bool isPathValid(vector<Point>)
}

World "1" *-- "many" MapManager

class FightManager{
    - vector<shared_ptr<Living>> team1
    - vector<shared_ptr<Living>> team2
    - vector<shared_ptr<InteractiveObject>> staticObjects
    - MapTiles tiles
    - MapManager* parentMapManager
    - int turnNumber
    - list<shared_ptr<Living>> playingOrder
    - list::enumerator<shared_ptr<Living>> currentPlayer
    - bool isStartPhase
    - time_t currentPlayerStartTime

    + FightManager(MapManager *parent, const vector<shared_ptr<Living>>& team1, vector<shared_ptr<Living>> team2)
    - FightEndResult getEndResultForPlayer(const shared_ptr<Player>& player)
}

class MapTiles{
    # char* tiles
    + int width
    + int height

    + char getTile(const int& x, const int& y)
    + char getTile(const Point& p)
}

class FightEndResult{
    + bool win
    + vector<BagObject> drop
    + int experience
}

class startPos{
    + vector<Point> team1
    + vector<Point> team2
}

class Point{
    + char x
    + char y

    + Point(const char& x, const char& y)
    + Point& operator+(const Point& other)
    + bool operator==(const Point& other)
}

class Pos{
    + char angle

    + Pos(const char& x, const char& y, const char& a)
    + bool operator==(const Pos& other)
}

Pos -up-|> Point

class Value{
    +int val
    +int type
}

class Range{
    +int min
    +int max
    +int sample()
}

class ValueRange{
    +int type
    +Value sample()
}

ValueRange -up-|> Range

class BagObject {
    # int individualWeight
    + int itemId
    + int itemCount
    + int getWeight()
    + bool operator==(const BagObject& other)
}

class BagItem {
    + int itemType
    + Characteristics charac
    + bool operator==(const BagItem& other)
}

class BagWeapon{
    + bool twoHanded
    + Attack attack
}

class Attack{
    + int AttackId
    + vector<Range> damages
    + vector<Effects> effects
    + int cost
    + int minRange
    + int maxRange
    + bool isInLine
    + bool needVision
    + int effectSize

    + void applyCharacteristics(const Characteristics& c)
    + AttackDamage sampleDamage(const int& distFromCenter=0)
}

class AttackDamage{
    + int attackId
    + vector<Value> damages
    + vector<Effects> effects
}

class Effect{
    + vector<Range> damages
    + vector<State> states
    + int duration
}

class ActiveEffect{
    + int startTurn
}

ActiveEffect -up-|> Effect

class BagPotion{
    + vector<Value> effects
}

abstract class MapObject {
    # Pos pos

    + Pos getPos()
}

class InteractiveObject{
    # vector<Action> possibleActions

    + bool blockView()
    + bool useTile()
}

class StorageObject{
    # vector<shared_ptr<BagObject>> storage
}

class MapResource{
    # int resourceId
}

abstract class Living{
    + int livingId
    + int livePoint
    # int level
    # string name
    # Characteristics charac
    # vector<ActiveEffect> effects
    # vector<Attack> attacks
    # vector<State> states
    # shared_ptr<FightManager> fightManager
    # shared_ptr<MapManager> mapManager
    # shared_ptr<Move> currentMove

    + AttackDamage getDamage(AttackDamage damage)
    + Characteristics getTotalCurrentCharacteristics()
    + bool isInState(const State& state)
    + void RequestMove(const Pos& pos)
    + void RequestMove(const vector<Pos>& path)
    + void RequestAttack(const int& attackId, const Pos& pos)
    + void setPos(const Pos& pos)
    + Pos getPos()
    + string getName()
    + int getLevel()
}

class Character{
    #BagItem hat
    #BagItem footWear
    #bagItem belt
    #bagItem necklace
    #bagItem ring1
    #bagItem ring2
    #bagWeapon hand1
    #bagWeapon hand2
}

class Player{
    # vector<shared_ptr<BagObject>> bag

    + int getBagWeight()
    + Characteristics getTotalCurrentCharacteristics()
    + void getEndOfFightResult(const FightEndResult& result)
}

class MonsterTeam{
    #vector<Monster> monsters
}

class Monster{
    #int monsterClass
    #vector<DropItem> drop
}

class NonPlayer{
    #vecotr<Action> possibleActions
}

class DropItem{
    +double dropProbability
    +int itemType
    +int maxDropCount
    +int getDropCount(const int& perception=100)
}

class ObjectDescriptor{
    +std::shared_ptr<CharacteristicsRange> itemCharac
    +std::shared_ptr<Attack> weaponAttack
    +int objectWeight
}

class ObjectFactory{
    - std::map<int,ObjectDescriptor> objectInfo

    - ObjectFactory()
    + void createFactory()
    + shared_ptr<ObjectFactory> getFactory()

    + shared_ptr<BagObject> createObject(const int& objectId, const int& count=1)
}

class Move{
    -std::vector<Pos> path
    -double startTime
    -double speed
    -bool done

    +Move(const double& startTime, const float& speed, const std::vector<Pos> path)
    +FloatPos getPos(double time)
}

class Action{

}
note right: a class for action with NonPlayer (PNJ)

InteractiveObject -up-|> MapObject
MapResource -up-|> InteractiveObject
StorageObject -up-|> InteractiveObject

Living -up-|> MapObject
Character -up-|> Living
Monster -up-|> Living
MonsterTeam -up-|> Living
Player -up-|> Character
NonPlayer -up-|> Character

MonsterTeam "1" *-- "many" Monster

BagObject -up-|> MapObject
BagItem -up-|> BagObject
BagPotion -up-|> BagObject
BagWeapon -up-|> BagItem


MapManager "1" *--right-- "many" MapObject
MapManager "1" *--left-- "many" startPos

NonPlayer "1" *-- "many" Action
Monster "1" *-- "many" DropItem

class Characteristics{
    +map<int, int> baseValue
    +map<int, int> fixedBonuses
    +map<int, int> relativeBonuses
    +map<int, int> fixedArmor
    +map<int, int> relativeArmor

    +Range apply(const Range& baseRange)
    +Characteristics operator+(const Characteristics& other)
    +bool operator==(const Characteristics& other)
    +Characteristics& operator+=(const Characteristics& other)
    +Characteristics operator+(Characteristics lhs, const Characteristics& rhs)
}

class CharacteristicsRange{
    +map<int, Range> baseValue
    +map<int, Range> fixedBonuses
    +map<int, Range> relativeBonuses
    +map<int, Range> fixedArmor
    +map<int, Range> relativeArmor

    +Characteristics sample()
}

' Server classes

class WebSocketServer{
    -list<WebSocketClient> clients
    -QWebSocketServer server

    -WebSocketServer(Qobject* parent=nullptr)
    +getServer(Qobject* parent=nullptr)
}

class WebSocketClient{
    -QWebSocket client
    -shared_ptr<Living> player

    +WebSocketClient(QWebSocket& client, Qobject* parent=nullptr)
    +void sendFullMap()
    +void sendLivingMove(const int& livingId, const vector<Point>& path)
    +void sendNewMapObject(const shared_ptr<MapObject>& object)
    +void sendAttack(const shared_ptr<Living>& living, const AttackDamage& attack)
    +void onMoveRequest(const vector<Point>& path)
    +void onAttackRequest(const int& attackId)
}

WebSocketServer "1" *-- "many" WebSocketClient

@enduml